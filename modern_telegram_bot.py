import logging
import asyncio
import json
import os
import traceback
from datetime import datetime, timedelta
from telegram import Update, InputMediaPhoto, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue, CallbackQueryHandler
from chatbot_core import Chatbot
import aiohttp
from PIL import Image
import torch
import torchvision.transforms as transforms
from torchvision.models import resnet50, ResNet50_Weights
import pytz
from fact_search import FactSearch
from thought_generator import ThoughtGenerator
from auto_chat import AutoChat
from typing import Optional
import edge_tts
import numpy as np
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
import aiofiles
import yaml
import base64
import re
from pathlib import Path
import httpx
import scipy.io.wavfile
import pyttsx3
from model_optimizer import get_optimizer
import torch
from contextlib import nullcontext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ModernBot:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = self.load_config()
        self.token = self.config['telegram_token']
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        self.optimizer = get_optimizer()
        self.optimizer.print_device_info()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        self.chatbot = Chatbot()
        self.chatbot.model = self.optimizer.optimize_for_inference(
            self.chatbot.model,
            batch_size=1
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.response_cache = {}
        self.cache_ttl = timedelta(hours=1)
        
        # URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.webapp_url = "https://hghDGfire-source.github.io/hghDGfire-source/"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.fact_searcher = FactSearch(threshold=0.7)
        self.thought_generator = ThoughtGenerator()
        self.auto_chat = AutoChat()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ ResNet –º–æ–¥–µ–ª–∏
        self.weights = ResNet50_Weights.DEFAULT
        self.model = resnet50(weights=self.weights)
        self.model.eval()
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.model = self.model.to(self.device)
        self.categories = self.weights.meta["categories"]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_settings = {}
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.tts_enabled = True
        self.facts_enabled = False
        self.thoughts_enabled = False
        self.auto_chat_enabled = False
        self.aris_mode = False
        self.active_chats = set()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS
        self._tts_enabled = None
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = 'config.yaml'
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as file:
                return yaml.safe_load(file)
        return {"telegram_token": "YOUR_TOKEN_HERE"}

    def load_user_settings(self, user_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings_dir = Path("user_settings")
        settings_file = settings_dir / f"{user_id}.json"
        
        default_settings = {
            'auto_start': False,
            'notifications': True,
            'sound': True,
            'voice': False,
            'chat_history': [],
            'facts_enabled': False,
            'thoughts_enabled': False,
            'auto_chat_enabled': False,
            'aris_mode': False,
            'tts_enabled': True
        }
        
        try:
            if settings_file.exists():
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    default_settings.update(settings)
        except Exception as e:
            logger.error(f"Error loading user settings: {e}")
            
        self.user_settings[user_id] = default_settings

    def save_user_settings(self, user_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            settings_dir = Path("user_settings")
            settings_dir.mkdir(exist_ok=True)
            
            settings_file = settings_dir / f"{user_id}.json"
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_settings.get(user_id, {}), f)
                
        except Exception as e:
            logger.error(f"Error saving user settings: {e}")

    async def initialize_tts(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS –º–æ–¥–µ–ª–∏"""
        try:
            self._tts_enabled = True
            logging.info("TTS –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {str(e)}")
            logging.error(f"Traceback: {traceback.format_exc()}")
            return False

    def move_to_device(self, obj, device):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—Å–µ —Ç–µ–Ω–∑–æ—Ä—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        if isinstance(obj, torch.Tensor):
            return obj.to(device)
        elif isinstance(obj, dict):
            return {key: self.move_to_device(value, device) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self.move_to_device(item, device) for item in obj]
        elif hasattr(obj, 'to_dict'):
            return self.move_to_device(obj.to_dict(), device)
        elif isinstance(obj, torch.nn.Module):
            return obj.to(device)
        elif isinstance(obj, torch.nn.Parameter):
            return obj.to(device)
        return obj

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            self.load_user_settings(user_id)
            
        keyboard = [
            [InlineKeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=self.webapp_url)
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Arisa, –≤–∞—à —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
            "üåü –£ –º–µ–Ω—è –µ—Å—Ç—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n"
            "ü§ñ - –û–±—â–µ–Ω–∏–µ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º\n"
            "üéØ - –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
            "üí≠ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–µ–π\n"
            "üó£ - –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "üìÖ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
            reply_markup=reply_markup
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        help_text = (
            "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/web - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
            "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞\n\n"
            "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
            "/facts - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤\n"
            "/thoughts - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º—ã—Å–ª–∏\n"
            "/tts - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ–∑–≤—É—á–∫—É\n"
            "/autochat - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç\n\n"
            "üé≠ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:\n"
            "/aris - –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º Aris\n"
            "/base - –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—É\n\n"
            "‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º:\n"
            "/time - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
            "/schedule - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"
        )
        await update.message.reply_text(help_text)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            self.load_user_settings(user_id)
            
        settings = self.user_settings[user_id]
        
        status_text = (
            "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"ü§ñ –†–µ–∂–∏–º Aris: {'–í–∫–ª—é—á–µ–Ω' if settings['aris_mode'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"üéØ –ü–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤: {'–í–∫–ª—é—á–µ–Ω' if settings['facts_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"üí≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–µ–π: {'–í–∫–ª—é—á–µ–Ω–∞' if settings['thoughts_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
            f"üó£ –û–∑–≤—É—á–∫–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if settings['tts_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
            f"ü§ù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç: {'–í–∫–ª—é—á–µ–Ω' if settings['auto_chat_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üîÑ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: {'–í–∫–ª—é—á–µ–Ω' if settings['auto_start'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if settings['notifications'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            f"üîä –ó–≤—É–∫–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if settings['sound'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ: {'–í–∫–ª—é—á–µ–Ω—ã' if settings['voice'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
            "üíª –°–∏—Å—Ç–µ–º–∞:\n"
            f"GPU: {'–î–æ—Å—Ç—É–ø–µ–Ω' if torch.cuda.is_available() else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {len(self.active_chats)}"
        )
        
        await update.message.reply_text(status_text)

    async def toggle_facts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤"""
        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            self.load_user_settings(user_id)
            
        settings = self.user_settings[user_id]
        settings['facts_enabled'] = not settings['facts_enabled']
        self.save_user_settings(user_id)
        
        status = "–≤–∫–ª—é—á–µ–Ω" if settings['facts_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await update.message.reply_text(f"üéØ –ü–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤ {status}")

    async def toggle_thoughts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—ã—Å–ª–µ–π"""
        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            self.load_user_settings(user_id)
            
        settings = self.user_settings[user_id]
        settings['thoughts_enabled'] = not settings['thoughts_enabled']
        self.save_user_settings(user_id)
        
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if settings['thoughts_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await update.message.reply_text(f"üí≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–µ–π {status}")

    async def toggle_tts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –æ–∑–≤—É—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            self.load_user_settings(user_id)
            
        settings = self.user_settings[user_id]
        settings['tts_enabled'] = not settings['tts_enabled']
        self.save_user_settings(user_id)
        
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if settings['tts_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await update.message.reply_text(f"üó£ –û–∑–≤—É—á–∫–∞ {status}")

    async def toggle_auto_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç"""
        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            self.load_user_settings(user_id)
            
        settings = self.user_settings[user_id]
        settings['auto_chat_enabled'] = not settings['auto_chat_enabled']
        self.save_user_settings(user_id)
        
        if settings['auto_chat_enabled']:
            self.active_chats.add(update.effective_chat.id)
        else:
            self.active_chats.discard(update.effective_chat.id)
        
        status = "–≤–∫–ª—é—á–µ–Ω" if settings['auto_chat_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await update.message.reply_text(f"ü§ù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç {status}")

    async def aris_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º Aris"""
        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            self.load_user_settings(user_id)
            
        settings = self.user_settings[user_id]
        settings['aris_mode'] = True
        self.save_user_settings(user_id)
        
        await update.message.reply_text("üé≠ –†–µ–∂–∏–º Aris –≤–∫–ª—é—á–µ–Ω")

    async def base_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—É"""
        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            self.load_user_settings(user_id)
            
        settings = self.user_settings[user_id]
        settings['aris_mode'] = False
        self.save_user_settings(user_id)
        
        await update.message.reply_text("üé≠ –í–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—É")

    async def time_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
        now = datetime.now(pytz.timezone('Asia/Irkutsk'))
        await update.message.reply_text(
            f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')}\n"
            f"üìÖ –î–∞—Ç–∞: {now.strftime('%d.%m.%Y')}\n"
            "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Asia/Irkutsk (UTC+8)"
        )

    async def schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
        if not context.args:
            await update.message.reply_text(
                "üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /schedule:\n\n"
                "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:\n"
                "/schedule add –ß–ß:–ú–ú –ó–∞–¥–∞—á–∞\n\n"
                "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
                "/schedule list\n\n"
                "–û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
                "/schedule clear"
            )
            return

        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            self.load_user_settings(user_id)

        settings = self.user_settings[user_id]
        if 'schedule' not in settings:
            settings['schedule'] = []

        command = context.args[0].lower()

        if command == 'add':
            if len(context.args) < 3:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–∞–¥–∞—á—É")
                return

            time = context.args[1]
            task = ' '.join(context.args[2:])
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
                datetime.strptime(time, '%H:%M')
                settings['schedule'].append({'time': time, 'task': task})
                self.save_user_settings(user_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await self.schedule_reminder(context, update.effective_chat.id, time, task)
                
                await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {time}")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")

        elif command == 'list':
            if not settings['schedule']:
                await update.message.reply_text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ")
                return

            schedule_text = "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
            for item in sorted(settings['schedule'], key=lambda x: x['time']):
                schedule_text += f"‚è∞ {item['time']} - {item['task']}\n"
            
            await update.message.reply_text(schedule_text)

        elif command == 'clear':
            settings['schedule'] = []
            self.save_user_settings(user_id)
            await update.message.reply_text("üßπ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")

    async def schedule_reminder(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, time_str: str, task: str):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            hour, minute = map(int, time_str.split(':'))
            now = datetime.now(pytz.timezone('Asia/Irkutsk'))
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if reminder_time <= now:
                reminder_time += timedelta(days=1)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            context.job_queue.run_once(
                self.send_reminder,
                reminder_time,
                data={'chat_id': chat_id, 'task': task}
            )
            
        except Exception as e:
            logger.error(f"Error scheduling reminder: {e}")

    async def send_reminder(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        job = context.job
        await context.bot.send_message(
            job.data['chat_id'],
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n{job.data['task']}"
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "theme":
            await query.message.edit_text("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        elif query.data == "notifications":
            await query.message.edit_text("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        elif query.data == "language":
            await query.message.edit_text("üó£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        elif query.data == "other":
            await query.message.edit_text("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    async def handle_webapp_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            data = json.loads(update.effective_message.web_app_data.data)
            user_id = update.effective_user.id
            
            if data.get('type') == 'settings':
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                settings = data.get('settings', {})
                if user_id not in self.user_settings:
                    self.load_user_settings(user_id)
                
                self.user_settings[user_id].update(settings)
                self.save_user_settings(user_id)
                
                await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                
                if settings.get('auto_start', False):
                    await self.start(update, context)
                    
            elif data.get('type') == 'voice':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                audio_data = base64.b64decode(data['audio'])
                with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                    temp_file.write(audio_data)
                    temp_file.flush()
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
                    text = await self.speech_to_text(temp_file.name)
                    os.remove(temp_file.name)
                    
                    if text:
                        await self.handle_text_message(update, context, text)
                    else:
                        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                        
            elif data.get('type') == 'tts':
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = data.get('text')
                voice_file = self.text_to_speech(text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                with open(voice_file, 'rb') as audio:
                    await update.message.reply_voice(audio)
                os.remove(voice_file)
                
            elif data.get('type') == 'command':
                command = data.get('command')
                if command == '/start':
                    await self.start(update, context)
                elif command == '/help':
                    await self.help_command(update, context)
                elif command == '/clear':
                    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                    if user_id in self.user_settings:
                        self.user_settings[user_id]['chat_history'] = []
                        self.save_user_settings(user_id)
                        await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞")
        
        except Exception as e:
            logger.error(f"Error handling webapp data: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return
            
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text.startswith('/'):
            await self.handle_command(update, context)
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )
        
        # –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
        )
        
        full_response = ""
        async for token in self.stream_response(text):
            full_response += token
            if len(full_response) % 20 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=message.message_id,
                        text=full_response + "‚ñå"
                    )
                except Exception:
                    pass
                    
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=message.message_id,
            text=full_response
        )
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à CUDA –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(self.response_cache) > 1000:
            self.optimizer.clear_cache()
            
    async def handle_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        command = update.message.text.split()[0].lower()
        
        if command == '/start':
            await self.cmd_start(update, context)
        elif command == '/help':
            await self.cmd_help(update, context)
        elif command == '/clear':
            await self.cmd_clear(update, context)
        elif command == '/voice':
            await self.cmd_voice(update, context)
        elif command == '/settings':
            await self.cmd_settings(update, context)
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )

    async def generate_response(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = prompt.strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.response_cache:
            cached_response, timestamp = self.response_cache[cache_key]
            if datetime.now() - timestamp < self.cache_ttl:
                return cached_response
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        try:
            with torch.cuda.amp.autocast() if self.optimizer.is_gpu_available else nullcontext():
                response = await self.chatbot.generate(prompt)
            
            # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            self.response_cache[cache_key] = (response, datetime.now())
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞
            self._cleanup_cache()
            
            return response
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
    
    def _cleanup_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞"""
        current_time = datetime.now()
        self.response_cache = {
            k: (v, t) for k, (v, t) in self.response_cache.items()
            if current_time - t < self.cache_ttl
        }
        
    async def stream_response(self, prompt: str):
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            with torch.cuda.amp.autocast() if self.optimizer.is_gpu_available else nullcontext():
                async for token in self.chatbot.stream_generate(prompt):
                    yield token
        except Exception as e:
            logger.error(f"Error in stream generation: {e}")
            yield "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if text is None:
                message = update.message.text
            else:
                message = text
            user_id = update.effective_user.id

            # –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            response = f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"Error in text message handler: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            voice_file = await update.message.voice.get_file()
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                await voice_file.download_to_drive(temp_file.name)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
                text = await self.speech_to_text(temp_file.name)
                os.remove(temp_file.name)
                
                if text:
                    await self.handle_text_message(update, context, text)
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    
        except Exception as e:
            logger.error(f"Error handling voice message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

    async def clear_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        try:
            user_id = update.effective_user.id
            if user_id in self.user_settings:
                self.user_settings[user_id]['chat_history'] = []
                self.save_user_settings(user_id)
                await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"Error in clear chat: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞")

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

    async def speech_to_text(self, voice_file):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç"""
        try:
            with sr.AudioFile(voice_file) as source:
                audio = sr.Recognizer().record(source)
                text = sr.Recognizer().recognize_google(audio, language='ru-RU')
                return text
        except Exception as e:
            logger.error(f"Error in speech recognition: {e}")
            return None

    def text_to_speech(self, text):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –≥–æ–ª–æ—Å"""
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ mp3
            mp3_path = temp_file.name.replace('.ogg', '.mp3')
            pyttsx3.init().save_to_file(text, mp3_path)
            pyttsx3.init().runAndWait()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ogg
            audio = AudioSegment.from_mp3(mp3_path)
            audio.export(temp_file.name, format='ogg')
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π mp3 —Ñ–∞–π–ª
            os.remove(mp3_path)
            
            return temp_file.name
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("settings", self.settings))
        application.add_handler(CommandHandler("clear", self.clear_chat))
        application.add_handler(CommandHandler("facts", self.toggle_facts))
        application.add_handler(CommandHandler("thoughts", self.toggle_thoughts))
        application.add_handler(CommandHandler("tts", self.toggle_tts))
        application.add_handler(CommandHandler("autochat", self.toggle_auto_chat))
        application.add_handler(CommandHandler("aris", self.aris_command))
        application.add_handler(CommandHandler("base", self.base_command))
        application.add_handler(CommandHandler("time", self.time_command))
        application.add_handler(CommandHandler("schedule", self.schedule_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.ALL & ~filters.COMMAND,
            self.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞—Ç–∞
        application.job_queue.run_repeating(
            self.check_auto_chat,
            interval=300,  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            first=10  # —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        )
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
        application.run_polling()

if __name__ == '__main__':
    bot = ModernBot()
    bot.run()
