// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    currentPage: 'chat',
    textMode: 'search',
    notes: [],
    userSettings: {
        notifications: true,
        sound: true,
        theme: 'dark',
        language: 'ru'
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    initNavigation();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    initChatPage();
    initSchedulePage();
    initTextPage();
    initSettingsPage();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const noteImageInput = document.getElementById('noteImage');
    const selectedFileName = document.getElementById('selectedFileName');
    const imagePreview = document.getElementById('imagePreview');
    
    if (noteImageInput) {
        noteImageInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                selectedFileName.textContent = file.name;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const reader = new FileReader();
                reader.onload = function(event) {
                    imagePreview.innerHTML = `<img src="${event.target.result}" alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä">`;
                    imagePreview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                selectedFileName.textContent = '';
                imagePreview.innerHTML = '';
                imagePreview.style.display = 'none';
            }
        });
    }
    
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function initNavigation() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navItems = document.querySelectorAll('.bottom-nav .nav-item');
    console.log('–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', navItems.length);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    navItems.forEach(function(item) {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            const pageName = this.getAttribute('data-page');
            console.log('–ö–ª–∏–∫ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', pageName);
            navigateToPage(pageName);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
function navigateToPage(pageName) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', pageName);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    state.currentPage = pageName;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.querySelectorAll('.page').forEach(function(page) {
        page.classList.remove('active');
    });
    
    // –°–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-item').forEach(function(navItem) {
        navItem.classList.remove('active');
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const targetPage = document.getElementById(pageName + 'Page');
    if (targetPage) {
        targetPage.classList.add('active');
        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:', pageName + 'Page');
    } else {
        console.error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', pageName + 'Page');
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const targetNavItem = document.querySelector(`.nav-item[data-page="${pageName}"]`);
    if (targetNavItem) {
        targetNavItem.classList.add('active');
        console.log('–ù–∞–≤–∏–≥–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:', pageName);
    } else {
        console.error('–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', pageName);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Ç–∞
function initChatPage() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Ç–∞...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    const menuButton = document.getElementById('menuButton');
    if (menuButton) {
        menuButton.addEventListener('click', function() {
            const sidebar = document.getElementById('chatSidebar');
            if (sidebar) {
                sidebar.classList.toggle('open');
                console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞');
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
    const searchButton = document.getElementById('searchButton');
    if (searchButton) {
        searchButton.addEventListener('click', function() {
            console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞');
            alert('–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const sendButton = document.getElementById('sendButton');
    const messageInput = document.getElementById('messageInput');
    
    if (sendButton && messageInput) {
        sendButton.addEventListener('click', function() {
            sendMessage();
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter
        messageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(function() {
        addMessage('üëã –ü—Ä–∏–≤–µ—Ç! –Ø Aris AI, –≤–∞—à —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', 'bot');
    }, 500);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value.trim();
    
    if (message) {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        addMessage(message, 'user');
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        messageInput.value = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const chatContainer = document.querySelector('.chat-container');
        if (chatContainer) {
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'message bot loading';
            loadingDiv.innerHTML = '<div class="message-content"><div class="typing-indicator"><span></span><span></span><span></span></div></div>';
            chatContainer.appendChild(loadingDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch('/api/message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                message: message,
                user_id: 'web_user',
                username: 'Web User'
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + response.status);
            }
            return response.json();
        })
        .then(data => {
            console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingMessage = document.querySelector('.message.loading');
            if (loadingMessage) {
                loadingMessage.remove();
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
            if (data.response) {
                addMessage(data.response, 'bot');
            } else {
                addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.', 'bot');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingMessage = document.querySelector('.message.loading');
            if (loadingMessage) {
                loadingMessage.remove();
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.', 'bot error');
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(text, type) {
    const chatContainer = document.querySelector('.chat-container');
    if (!chatContainer) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.textContent = text;
    
    messageDiv.appendChild(contentDiv);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
    const timeDiv = document.createElement('div');
    timeDiv.className = 'message-time';
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ AM/PM
    const now = new Date();
    const hours = now.getHours().toString().padStart(2, '0');
    const minutes = now.getMinutes().toString().padStart(2, '0');
    timeDiv.textContent = `${hours}:${minutes}`;
    
    messageDiv.appendChild(timeDiv);
    
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function initSchedulePage() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
    
    const addButton = document.getElementById('addScheduleButton');
    if (addButton) {
        addButton.addEventListener('click', function() {
            const modal = document.getElementById('scheduleModal');
            if (modal) {
                modal.classList.add('active');
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modal = document.getElementById('scheduleModal');
    if (modal) {
        const closeButton = modal.querySelector('.close-button');
        if (closeButton) {
            closeButton.addEventListener('click', function() {
                modal.classList.remove('active');
            });
        }
        
        const cancelButton = document.getElementById('cancelSchedule');
        if (cancelButton) {
            cancelButton.addEventListener('click', function() {
                modal.classList.remove('active');
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
        const saveButton = document.getElementById('saveSchedule');
        if (saveButton) {
            saveButton.addEventListener('click', function() {
                const daySelect = document.getElementById('daySelect');
                const timeInput = document.getElementById('timeInput');
                const taskInput = document.getElementById('taskInput');
                
                if (daySelect && timeInput && taskInput) {
                    const dayOfWeek = daySelect.value;
                    const time = timeInput.value;
                    const task = taskInput.value.trim();
                    
                    if (dayOfWeek && time && task) {
                        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', { dayOfWeek, time, task });
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–∞–±–ª–∏—Ü—É
                        addScheduleItem(dayOfWeek, time, task);
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                        saveScheduleToLocalStorage();
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                        modal.classList.remove('active');
                        daySelect.selectedIndex = 0;
                        timeInput.value = '';
                        taskInput.value = '';
                        
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
                        const currentFilter = localStorage.getItem('scheduleFilter') || 'all';
                        applyScheduleFilter(currentFilter);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        showNotification('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'success');
                    } else {
                        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
                    }
                }
            });
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filterButtons = document.querySelectorAll('.filter-button');
    if (filterButtons.length > 0) {
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                const filter = this.getAttribute('data-filter');
                applyScheduleFilter(filter);
            });
        });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ localStorage
    loadScheduleFromLocalStorage();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const savedFilter = localStorage.getItem('scheduleFilter') || 'all';
    applyScheduleFilter(savedFilter);
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function addScheduleItem(dayOfWeek, time, task) {
    const scheduleList = document.getElementById('scheduleList');
    if (!scheduleList) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    const dayNames = [
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', 
        '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    ];
    const dayName = dayNames[parseInt(dayOfWeek) - 1];
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const scheduleRow = document.createElement('div');
    scheduleRow.className = 'schedule-row';
    scheduleRow.setAttribute('data-day', dayOfWeek);
    scheduleRow.setAttribute('data-time', time);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
    scheduleRow.innerHTML = `
        <div class="schedule-cell">${dayName}</div>
        <div class="schedule-cell">${time}</div>
        <div class="schedule-cell">${task}</div>
        <div class="schedule-cell">
            <button class="delete-schedule-item" onclick="deleteScheduleItem(this)">
                <i class="material-icons">delete</i>
            </button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
    scheduleList.appendChild(scheduleRow);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    sortSchedule();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
    const currentFilter = localStorage.getItem('scheduleFilter') || 'all';
    applyScheduleFilter(currentFilter);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function sortSchedule() {
    const scheduleList = document.getElementById('scheduleList');
    if (!scheduleList) return;
    
    const rows = Array.from(scheduleList.querySelectorAll('.schedule-row'));
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
    rows.sort((a, b) => {
        const dayA = parseInt(a.getAttribute('data-day'));
        const dayB = parseInt(b.getAttribute('data-day'));
        
        if (dayA !== dayB) {
            return dayA - dayB;
        }
        
        const timeA = a.getAttribute('data-time');
        const timeB = b.getAttribute('data-time');
        
        return timeA.localeCompare(timeB);
    });
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    scheduleList.innerHTML = '';
    rows.forEach(row => {
        scheduleList.appendChild(row);
    });
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function deleteScheduleItem(button) {
    const scheduleRow = button.closest('.schedule-row');
    if (scheduleRow) {
        // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        scheduleRow.style.opacity = '0';
        scheduleRow.style.transform = 'translateX(20px)';
        
        setTimeout(() => {
            scheduleRow.remove();
            saveScheduleToLocalStorage();
            showNotification('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', 'success');
        }, 300);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ localStorage
function saveScheduleToLocalStorage() {
    const scheduleList = document.getElementById('scheduleList');
    if (!scheduleList) return;
    
    const scheduleItems = [];
    const rows = scheduleList.querySelectorAll('.schedule-row');
    
    rows.forEach(row => {
        const dayOfWeek = row.getAttribute('data-day');
        const time = row.getAttribute('data-time');
        const task = row.querySelectorAll('.schedule-cell')[2].textContent;
        
        scheduleItems.push({
            dayOfWeek,
            time,
            task
        });
    });
    
    localStorage.setItem('scheduleItems', JSON.stringify(scheduleItems));
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ localStorage
function loadScheduleFromLocalStorage() {
    const scheduleList = document.getElementById('scheduleList');
    if (!scheduleList) return;
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    scheduleList.innerHTML = '';
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const savedItems = localStorage.getItem('scheduleItems');
    if (savedItems) {
        try {
            const scheduleItems = JSON.parse(savedItems);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
            scheduleItems.forEach(item => {
                addScheduleItem(item.dayOfWeek, item.time, item.task);
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
function applyScheduleFilter(filter) {
    console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:', filter);
    
    const scheduleRows = document.querySelectorAll('#scheduleList .schedule-row');
    const today = new Date().getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ...
    const todayAdjusted = today === 0 ? 7 : today; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç 1-7
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞
    const filterButtons = document.querySelectorAll('.filter-button');
    filterButtons.forEach(btn => {
        if (btn.getAttribute('data-filter') === filter) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ —Å—Ç—Ä–æ–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    scheduleRows.forEach(row => {
        const dayOfWeek = parseInt(row.getAttribute('data-day'));
        
        switch (filter) {
            case 'today':
                if (dayOfWeek === todayAdjusted) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
                break;
                
            case 'week':
                row.style.display = '';
                break;
                
            case 'all':
            default:
                row.style.display = '';
                break;
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    localStorage.setItem('scheduleFilter', filter);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const visibleRows = Array.from(scheduleRows).filter(row => row.style.display !== 'none');
    const emptyMessage = document.querySelector('.schedule-empty-message');
    
    if (visibleRows.length === 0) {
        if (!emptyMessage) {
            const scheduleContainer = document.querySelector('.schedule-container');
            const newEmptyMessage = document.createElement('div');
            newEmptyMessage.className = 'schedule-empty-message';
            newEmptyMessage.innerHTML = `
                <i class="material-icons">event_busy</i>
                <p>–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            `;
            scheduleContainer.appendChild(newEmptyMessage);
        }
    } else if (emptyMessage) {
        emptyMessage.remove();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
function initTextPage() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º...');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏
    const modeButtons = document.querySelectorAll('.mode-button');
    const sections = {
        'search': document.getElementById('searchSection'),
        'summary': document.getElementById('summarySection'),
        'notes': document.getElementById('notesSection')
    };
    
    modeButtons.forEach(button => {
        button.addEventListener('click', () => {
            const mode = button.getAttribute('data-mode');
            console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–µ–∫—Å—Ç–∞:', mode);
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            modeButtons.forEach(btn => btn.classList.remove('active'));
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
            Object.values(sections).forEach(section => {
                if (section) section.classList.add('hidden');
            });
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ —Å–µ–∫—Ü–∏—é
            button.classList.add('active');
            if (sections[mode]) {
                sections[mode].classList.remove('hidden');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
            state.textMode = mode;
            
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–æ–∫, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
            if (mode === 'notes') {
                loadNotes();
            }
        });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å–∫–∞–º–∏
    initNotesFeature();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
    initSearchFeature();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    initSummaryFeature();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å–∫–∞–º–∏
function initNotesFeature() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å–∫–∞–º–∏...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∫–∏ –∏–∑ localStorage
    loadNotes();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∫–∏
    const addNoteButton = document.getElementById('addNoteButton');
    if (addNoteButton) {
        addNoteButton.addEventListener('click', () => {
            openNoteModal();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const noteModal = document.getElementById('noteModal');
    if (noteModal) {
        const closeModalButton = noteModal.querySelector('.note-modal-close');
        const cancelButton = document.getElementById('cancelNoteButton');
        const saveButton = document.getElementById('saveNoteButton');
        
        if (closeModalButton) {
            closeModalButton.addEventListener('click', closeNoteModal);
        }
        
        if (cancelButton) {
            cancelButton.addEventListener('click', closeNoteModal);
        }
        
        if (saveButton) {
            saveButton.addEventListener('click', () => {
                const noteId = document.getElementById('noteId').value;
                const title = document.getElementById('noteTitle').value.trim();
                const content = document.getElementById('noteContent').value.trim();
                const imageInput = document.getElementById('noteImage');
                
                if (!title || !content) {
                    showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if (imageInput && imageInput.files && imageInput.files[0]) {
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        const imageData = e.target.result;
                        
                        if (noteId) {
                            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∫–∏
                            editNote(noteId, title, content, imageData);
                        } else {
                            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∫–∏
                            addNote(title, content, imageData);
                        }
                        
                        closeNoteModal();
                    };
                    
                    reader.readAsDataURL(imageInput.files[0]);
                } else {
                    // –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if (noteId) {
                        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∫–∏
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                        const existingNote = state.notes.find(note => note.id === noteId);
                        const existingImage = existingNote ? existingNote.image : null;
                        
                        editNote(noteId, title, content, existingImage);
                    } else {
                        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∫–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        addNote(title, content);
                    }
                    
                    closeNoteModal();
                }
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageInput = document.getElementById('noteImage');
        if (imageInput) {
            imageInput.addEventListener('change', function() {
                const imagePreview = document.getElementById('imagePreview');
                
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        imagePreview.innerHTML = `<img src="${e.target.result}" alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä">`;
                    };
                    
                    reader.readAsDataURL(this.files[0]);
                } else {
                    imagePreview.innerHTML = '';
                }
            });
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    document.addEventListener('click', (e) => {
        if (e.target.closest('.edit-note')) {
            const noteCard = e.target.closest('.note-card');
            if (noteCard) {
                const noteId = noteCard.getAttribute('data-id');
                const title = noteCard.querySelector('h4').textContent;
                const content = noteCard.querySelector('.note-content').innerHTML;
                const imageElement = noteCard.querySelector('.note-image img');
                const imageData = imageElement ? imageElement.src : null;
                
                openNoteModal(noteId, title, content, imageData);
            }
        } else if (e.target.closest('.delete-note')) {
            const noteCard = e.target.closest('.note-card');
            if (noteCard) {
                const noteId = noteCard.getAttribute('data-id');
                
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
                    deleteNote(noteId);
                }
            }
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
function initSearchFeature() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞...');
    
    const searchButton = document.querySelector('#searchSection .button');
    const searchQuery = document.getElementById('searchQuery');
    const textInput = document.getElementById('textInput');
    const resultsContainer = document.getElementById('resultsContainer');
    
    if (searchButton && searchQuery && textInput && resultsContainer) {
        searchButton.addEventListener('click', () => {
            const query = searchQuery.value.trim();
            const text = textInput.value.trim();
            
            if (!query) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', 'error');
                return;
            }
            
            if (!text) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞', 'error');
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            resultsContainer.innerHTML = '<div class="loading-indicator"><span></span><span></span><span></span></div>';
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            fetch('/api/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text, query })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', data);
                
                if (data.error) {
                    showNotification(data.error, 'error');
                    resultsContainer.innerHTML = `<div class="error-message">${data.error}</div>`;
                    return;
                }
                
                if (data.results && data.results.length > 0) {
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                    const resultsHtml = data.results.map(result => `
                        <div class="search-result">
                            <div class="result-content">${result.highlight}</div>
                        </div>
                    `).join('');
                    
                    resultsContainer.innerHTML = `
                        <div class="results-header">
                            <h4>–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${data.count}</h4>
                        </div>
                        <div class="results-list">
                            ${resultsHtml}
                        </div>
                    `;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                    const copyButton = document.getElementById('copyResults');
                    if (copyButton) {
                        copyButton.style.display = 'flex';
                    }
                } else {
                    resultsContainer.innerHTML = '<div class="empty-results">–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', error);
                resultsContainer.innerHTML = `<div class="error-message">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${error.message}</div>`;
                showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ', 'error');
            });
        });
        
        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter
        searchQuery.addEventListener('keydown', e => {
            if (e.key === 'Enter') {
                searchButton.click();
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
function initSummaryFeature() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏...');
    
    const summarizeButton = document.querySelector('#summarySection .button');
    const textInput = document.getElementById('textInput');
    const resultsContainer = document.getElementById('resultsContainer');
    
    if (summarizeButton && textInput && resultsContainer) {
        summarizeButton.addEventListener('click', () => {
            const text = textInput.value.trim();
            
            if (!text) {
                showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏', 'error');
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            resultsContainer.innerHTML = '<div class="loading-indicator"><span></span><span></span><span></span></div>';
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            fetch('/api/summarize', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:', data);
                
                if (data.error) {
                    showNotification(data.error, 'error');
                    resultsContainer.innerHTML = `<div class="error-message">${data.error}</div>`;
                    return;
                }
                
                if (data.summary) {
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                    resultsContainer.innerHTML = `
                        <div class="summary-result">
                            <h4>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</h4>
                            <div class="summary-content">${data.summary}</div>
                        </div>
                    `;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                    const copyButton = document.getElementById('copyResults');
                    if (copyButton) {
                        copyButton.style.display = 'flex';
                    }
                } else {
                    resultsContainer.innerHTML = '<div class="empty-results">–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</div>';
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:', error);
                resultsContainer.innerHTML = `<div class="error-message">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}</div>`;
                showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏', 'error');
            });
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const copyButton = document.getElementById('copyResults');
    if (copyButton) {
        copyButton.addEventListener('click', () => {
            const resultsContent = resultsContainer.textContent;
            
            if (resultsContent) {
                navigator.clipboard.writeText(resultsContent)
                    .then(() => {
                        showNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                    })
                    .catch(err => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
                        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'error');
                    });
            }
        });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–æ–∫ –∏–∑ localStorage
function loadNotes() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–æ–∫...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∫–∏ –∏–∑ localStorage
    const savedNotes = localStorage.getItem('arisNotes');
    if (savedNotes) {
        try {
            state.notes = JSON.parse(savedNotes);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–æ–∫:', e);
            state.notes = [];
        }
    } else {
        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–æ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
        state.notes = [
            {
                id: '1',
                title: '–§–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è',
                content: '<p>(a + b)¬≤ = a¬≤ + 2ab + b¬≤</p><p>(a - b)¬≤ = a¬≤ - 2ab + b¬≤</p><p>(a + b)(a - b) = a¬≤ - b¬≤</p><p>(a + b)¬≥ = a¬≥ + 3a¬≤b + 3ab¬≤ + b¬≥</p><p>(a - b)¬≥ = a¬≥ - 3a¬≤b + 3ab¬≤ - b¬≥</p>',
                type: 'math-formula'
            },
            {
                id: '2',
                title: '–¢–µ–æ—Ä–µ–º—ã',
                content: '<p><strong>–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞:</strong> –í –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ –∫–≤–∞–¥—Ä–∞—Ç –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã —Ä–∞–≤–µ–Ω —Å—É–º–º–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∫–∞—Ç–µ—Ç–æ–≤: a¬≤ + b¬≤ = c¬≤</p><p><strong>–¢–µ–æ—Ä–µ–º–∞ –í–∏–µ—Ç–∞:</strong> –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è ax¬≤ + bx + c = 0 —Å –∫–æ—Ä–Ω—è–º–∏ x‚ÇÅ –∏ x‚ÇÇ: x‚ÇÅ + x‚ÇÇ = -b/a, x‚ÇÅ¬∑x‚ÇÇ = c/a</p>',
                type: 'math-formula'
            }
        ];
        saveNotes();
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø–∏—Å–∫–∏
    renderNotes();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–æ–∫ –≤ localStorage
function saveNotes() {
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–æ–∫...');
    
    try {
        localStorage.setItem('arisNotes', JSON.stringify(state.notes));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–æ–∫:', e);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–æ–∫
function renderNotes() {
    console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–æ–∫...');
    
    const notesList = document.querySelector('.notes-list');
    if (!notesList) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    notesList.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∫–∏
    state.notes.forEach(note => {
        const noteCard = document.createElement('div');
        noteCard.className = `note-card ${note.type || ''}`;
        noteCard.setAttribute('data-id', note.id);
        
        let imageHtml = '';
        if (note.image) {
            imageHtml = `
                <div class="note-image">
                    <img src="${note.image}" alt="${note.title}">
                </div>
            `;
        }
        
        noteCard.innerHTML = `
            <div class="note-header">
                <h4>${note.title}</h4>
                <div class="note-actions">
                    <button class="edit-note" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        <i class="material-icons">edit</i>
                    </button>
                    <button class="delete-note" title="–£–¥–∞–ª–∏—Ç—å">
                        <i class="material-icons">delete</i>
                    </button>
                </div>
            </div>
            <div class="note-content">
                ${note.content}
            </div>
            ${imageHtml}
        `;
        
        notesList.appendChild(noteCard);
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∫–∏
function openNoteModal(id = '', title = '', content = '', imageData = null) {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∫–∏:', id);
    
    const noteModal = document.getElementById('noteModal');
    if (!noteModal) {
        console.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        return;
    }
    
    const modalTitle = document.getElementById('noteModalTitle');
    const noteIdInput = document.getElementById('noteId');
    const noteTitleInput = document.getElementById('noteTitle');
    const noteContentInput = document.getElementById('noteContent');
    const imagePreview = document.getElementById('imagePreview');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
    if (noteIdInput) noteIdInput.value = id;
    if (noteTitleInput) noteTitleInput.value = title;
    if (noteContentInput) noteContentInput.value = content.replace(/<[^>]*>/g, ''); // –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    
    // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (imagePreview) {
        if (imageData) {
            imagePreview.innerHTML = `<img src="${imageData}" alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä">`;
        } else {
            imagePreview.innerHTML = '';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (modalTitle) modalTitle.textContent = id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å' : '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    noteModal.classList.add('active');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeNoteModal() {
    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∫–∏');
    
    const noteModal = document.getElementById('noteModal');
    if (!noteModal) {
        console.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        return;
    }
    
    const noteForm = document.getElementById('noteForm');
    const imagePreview = document.getElementById('imagePreview');
    
    if (noteForm) noteForm.reset();
    if (imagePreview) imagePreview.innerHTML = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    noteModal.classList.remove('active');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∫–∏
function addNote(title, content, image = null) {
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∫–∏:', title);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å–∫—É
    const newNote = {
        id: Date.now().toString(),
        title,
        content: formatNoteContent(content),
        type: 'user-note'
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (image) {
        newNote.image = image;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
    state.notes.push(newNote);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    saveNotes();
    renderNotes();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∫–∏
function editNote(id, title, content, image = null) {
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∫–∏:', id);
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∫—É –ø–æ id
    const noteIndex = state.notes.findIndex(note => note.id === id);
    if (noteIndex === -1) {
        console.error('–ó–∞–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', id);
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    state.notes[noteIndex].title = title;
    state.notes[noteIndex].content = formatNoteContent(content);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (image) {
        state.notes[noteIndex].image = image;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    saveNotes();
    renderNotes();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∫–∏
function deleteNote(id) {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∫–∏:', id);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∫–∏ —Å –¥—Ä—É–≥–∏–º–∏ id
    state.notes = state.notes.filter(note => note.id !== id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    saveNotes();
    renderNotes();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', 'success');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–ø–∏—Å–∫–∏
function formatNoteContent(content) {
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã
    return content.split('\n').map(line => `<p>${line}</p>`).join('');
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
function initSettingsPage() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
    loadSettings();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    const toggles = document.querySelectorAll('.toggle-switch input');
    if (toggles.length > 0) {
        toggles.forEach(toggle => {
            toggle.addEventListener('change', function() {
                const setting = this.getAttribute('data-setting');
                const value = this.checked;
                
                console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', setting, value);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                if (setting && state.userSettings) {
                    state.userSettings[setting] = value;
                    saveSettings();
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ä–∞–∑—É
                    if (setting === 'theme') {
                        applyTheme(value ? 'light' : 'dark');
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    showNotification(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${setting}" –∏–∑–º–µ–Ω–µ–Ω–∞`, 'info');
                }
            });
        });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSettings() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
    try {
        const savedSettings = localStorage.getItem('arisSettings');
        if (savedSettings) {
            state.userSettings = JSON.parse(savedSettings);
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    applySettings();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    try {
        localStorage.setItem('arisSettings', JSON.stringify(state.userSettings));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function applySettings() {
    console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    if (state.userSettings.theme) {
        applyTheme(state.userSettings.theme);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
    const toggles = document.querySelectorAll('.toggle-switch input');
    if (toggles.length > 0) {
        toggles.forEach(toggle => {
            const setting = toggle.getAttribute('data-setting');
            if (setting && state.userSettings[setting] !== undefined) {
                toggle.checked = state.userSettings[setting];
            }
        });
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
function applyTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}):`, message);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.notification').forEach(note => note.remove());
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.classList.add('hide');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}